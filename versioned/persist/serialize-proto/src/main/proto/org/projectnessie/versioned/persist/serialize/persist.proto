/*
 * Copyright (C) 2020 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package nessie.persist;

option java_package = "org.projectnessie.versioned.persist.serialize";
option java_outer_classname = "AdapterTypes";
option java_generate_equals_and_hash = true;

message CommitLogEntry {
  int64 createdTime = 1;
  bytes hash = 2;
  // First element contains the immediate parent commit ID. Additional entries
  // up to N indirect parents.
  repeated bytes parents = 3;
  bytes metadata = 4;
  repeated KeyWithBytes puts = 5;
  repeated Key deletes = 6;
  int32 key_list_distance = 7;
  repeated KeyListEntry key_list = 8;
  repeated bytes key_list_ids = 9;
  int64 commitSeq = 10;
  // Contains the "merged commit ID", no practical use case for multiple
  // additional parents, yet - but implementing this as a list for N-way
  // merges in the future.
  repeated bytes additional_parents = 11;
  // Since Nessie 0.31.0 - the way in which key-lists are persisted, both
  // embedded (in key_list) and externally (via key_list_ids).
  optional KeyListVariant key_list_variant = 12;
  // Open-addressing bucket offsets. Same number of elements as key_list_ids.
  repeated int32 key_list_entity_offsets = 13;
  optional float key_list_load_factor = 14;
  optional int32 key_list_bucket_count = 15;
}

// See CommitLogEntry.KeyListVariant
enum KeyListVariant {
  EMBEDDED_AND_EXTERNAL_MRU = 0;
  OPEN_ADDRESSING = 1;
}

message Key {
  repeated string element = 1;
}

message KeyWithBytes {
  Key key = 1;
  ContentId content_id = 2;
  int32 payload = 3;
  bytes value = 4;
}

message KeyList {
  repeated KeyListEntry keys = 1;
}

message KeyListEntry {
  Key key = 1;
  ContentId content_id = 2;
  int32 payload = 3;
  optional bytes commit_id = 4;
}

message ContentId {
  string id = 1;
}

message ContentIdWithBytes {
  ContentId content_id = 1;
  int32 payload = 2;
  bytes value = 3;
}

// Used by non-transactional database-adapters
message GlobalStateLogEntry {
  int64 createdTime = 1;
  bytes id = 2;
  repeated bytes parents = 3;
  repeated ContentIdWithBytes puts = 4;
}

enum RefType {
  Branch = 0;
  Tag = 1;
}

message RefLogEntry {
  bytes ref_log_id = 1;
  bytes ref_name = 2;
  RefType ref_type = 3;
  bytes commit_hash = 4;
  repeated bytes parents = 5;
  int64 operation_time = 6;
  enum Operation {
    CREATE_REFERENCE = 0;
    COMMIT = 1;
    DELETE_REFERENCE = 2;
    ASSIGN_REFERENCE = 3;
    MERGE = 4;
    TRANSPLANT = 5;
  }
  Operation operation = 7;
  repeated bytes source_hashes = 8;
}

// Used by non-transactional database-adapters
message GlobalStatePointer {
  // Random ID, used for CAS.
  bytes global_id = 1;
  // most recently updated named reference appears first
  repeated NamedReference named_references = 2;
  bytes ref_log_id = 3;
  repeated bytes global_parents_incl_head = 4;
  repeated bytes ref_log_parents_incl_head = 5;
  // If present, contains the ID of the head of the global-log.
  // If not present, probably from an older Nessie version, global_id
  // represents the head of the global-log.
  optional bytes global_log_head = 6;
}

message RefLogParents {
  repeated bytes ref_log_parents_incl_head = 1;
  // 'version' is used for optimistic locking / CAS, it's a random value
  optional bytes version = 2;
}

message ReferenceNames {
  repeated string ref_names = 1;
}

message NamedReference {
  string name = 1;
  RefPointer ref = 2;
}

// Used by non-transactional database-adapters
message RefPointer {
  RefType type = 1;
  bytes hash = 2;
}

message RepoProps {
  int32 repo_version = 1;
  repeated Entry properties = 2;
}

message Entry {
  string key = 1;
  string value = 2;
}
