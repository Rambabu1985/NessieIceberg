# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PR Build Check

on:
  pull_request:

jobs:
  java:
    name: Java/Maven
    runs-on: ubuntu-latest

    steps:

    ### BEGIN runner setup
    - name: Update /etc/hosts
      run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up JDK 8
      uses: AdoptOpenJDK/install-jdk@v1
      with:
        version: '8'
        targets: 'JDK8_HOME'
    - name: Set up Maven toolchains.xml
      run: |
          cat << 'EOT' > ${HOME}/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>11</version>
                <vendor>zulu</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>1.8</version>
                <vendor>adoptopenjdk</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JDK8_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOT
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/projectnessie
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Cache local NPM repository
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Cache local Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    ### END runner setup

    - name: Build with Maven
      run: mvn -B install javadoc:javadoc-no-fork --file pom.xml -Pcode-coverage,jdk8-tests -Dtest.log.level=WARN
      env:
        SPARK_LOCAL_IP: localhost

    - name: Capture test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: |
          **/target/surefire-reports/*
          **/target/failsafe-reports/*

    - uses: codecov/codecov-action@v1
      with:
        flags: java

    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ./tools/apprunner-gradle-plugin

  python:
    name: Python
    runs-on: ubuntu-latest
    env:
      working-directory: ./python
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:


    ### BEGIN runner setup
    - name: Update /etc/hosts
      run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache local pip repository
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Python dependencies
      working-directory: ${{env.working-directory}}
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    ### END runner setup

    - name: Test with tox
      run: tox
      working-directory: ${{env.working-directory}}

    - uses: codecov/codecov-action@v1
      with:
        flags: python

  site:
    name: Build Website
    runs-on: ubuntu-latest
    steps:

    ### BEGIN runner setup
    - name: Update /etc/hosts
      run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Upgrade pip
      run: |
        # install pip=>20.1 to use "pip cache dir"
        python3 -m pip install --upgrade pip
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('site/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: python3 -m pip install -r ./site/requirements.txt
    ### END runner setup

    - name: Generate Static Site
      run: mkdocs build
      working-directory: ./site
