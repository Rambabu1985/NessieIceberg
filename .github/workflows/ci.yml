# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Unifies main + PR workflow.
#
# The unified CI workflow consists of 2 "stages":
# - Checks - test, intTest, NesQuEIT, etc
# - Finalize - a "success" dummy job for PRs + a "save to github-cache" job for push-to-main
#
# Utilizes the Gradle build cache for all stages. The updated build cache
# of the jobs in the checks stage are saved as artifacts (with the minimum
# retention period). The updated build cache is pushed back to GigHub's
# cache when the checks have successfully finished.
#
# Java CI runs against Java 11 and Java 17, where it is meaningful.
# (Spark tests always run against 11, so not run against Java 17.)

name: CI build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'LICENSE'
      - 'NOTICE'
      - '**.md'
      - '!site/**'
      - '.github/renovate.json5'
      - '.github/workflows/release*.yml'
      - '.github/workflows/check*.yml'
      - '.idea/**'
      - '.editorconfig'
  pull_request:
    types: [labeled, opened, synchronize, reopened]

# For the main branch: let all CI runs complete, one after the other. This has a couple advantages:
# * Site deployments happen in commit-order
# * Saved Gradle cache are persisted in commit-order
# * (Potentially) more GH runners available for PRs
concurrency:
  # PRs: 1 CI run concurrently / older ones are cancelled
  # main branch: 1 CI run concurrently / all commits / no cancellation
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:

  stress:
    name: Gradle stress
    runs-on: ubuntu-22.04
    env:
      SPARK_LOCAL_IP: localhost

    steps:
      - uses: actions/checkout@v3.5.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java

      - name: Gradle / publish
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: true
          arguments: |
            --no-watch-fs --no-daemon 
            publishToMavenLocal
            -Puber-jar

      - name: Stress more
        run: |
          for i in $(seq 1 50); do
            echo "::group::Build $i"

            cat <<! > api/model/src/main/java/org/projectnessie/Foo$i.java
          package org.projectnessie;
          public class Foo$i {
            public void blah$i() {
              System.out.println($i);
            }
          }
          !
          
            ./gradlew --no-watch-fs --no-daemon compileAll publishToMavenLocal  
            echo "::endgroup::"
          done

  stress2:
    name: Gradle stress 2
    runs-on: ubuntu-22.04
    env:
      SPARK_LOCAL_IP: localhost

    steps:
      - uses: actions/checkout@v3.5.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare

      - name: Gradle / publish
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: true
          arguments: |
            --no-watch-fs --no-daemon 
            publishToMavenLocal
            -Puber-jar

      - name: Stress more
        run: |
          for i in $(seq 1 50); do
            echo "::group::Build $i"

            cat <<! > api/model/src/main/java/org/projectnessie/Foo$i.java
          package org.projectnessie;
          public class Foo$i {
            public void blah$i() {
              System.out.println($i);
            }
          }
          !
          
            ./gradlew --no-watch-fs --no-daemon compileAll publishToMavenLocal  
            echo "::endgroup::"
          done
