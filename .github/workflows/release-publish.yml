# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Publish Nessie release artifacts

# Triggered when a `nessie-*` tag is being pushed.

# Publishes the Maven, Python, Docker and Gradle-plugin artifacts.

name: Publish release

on:
  push:
    tags:
      - nessie-*

jobs:
  build:
    name: Publish release
    runs-on: ubuntu-latest

    # Runs in the `release` environment, which has the necessary secrets and defines the reviewers.
    # See https://docs.github.com/en/actions/reference/environments
    environment: release

    steps:

    ### BEGIN runner setup
    - name: Update /etc/hosts
      run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Set up JDK 8
      uses: AdoptOpenJDK/install-jdk@v1
      with:
        version: '8'
        targets: 'JDK8_HOME'
    # Using Python 3.8
    # Might be worth to bump the version and/or make it configurable in the future
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set up Maven toolchains.xml
      run: cp .github/maven/toolchains.xml ${HOME}/.m2/toolchains.xml
    - name: Cache local pip repository
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/projectnessie
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Cache local NPM repository
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Cache local Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements_dev.txt
        pip install bumpversion
    ### END runner setup

    # GH doesn't provide just the tag name, so this step strips `/refs/tags/` from `GITHUB_REF`
    # and provides the output `VERSION`
    - name: Get the tag name
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    # Log changelog (FYI only)
    - name: Changelog for ${{ steps.get_version.outputs.VERSION }}
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        git changelog -t ${RELEASE_VERSION} -n -x /dev/null

    # Deploys Maven artifacts. Build and test steps were already ran in previous steps.
    # Not running tests, because the environment contains secrets.
    - name: Publish Maven artifacts for release ${{ steps.get_version.outputs.VERSION }}
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_ACCESS_ID }}
        MAVEN_OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        SPARK_LOCAL_IP: localhost
      run: mvn -B deploy --file pom.xml -Pnative -Prelease -DdeployAtEnd=true -DskipTests

    # Deploys Gradle plugin. Build and test steps were already ran in previous steps
    # TODO this needs the Gradle-plugin-portal secrets
    - name: Publish Gradle Plugin for release ${{ steps.get_version.outputs.VERSION }}
      working-directory: ./tools/apprunner-gradle-plugin/
      run: ./gradlew publishPlugins

    # Deploys pynessie. Build and test steps were already ran in previous steps
    - name: Build pynessie for release ${{ steps.get_version.outputs.VERSION }}
      working-directory: ./python
      run: python setup.py sdist bdist_wheel

    - name: Publish pynessie package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    # Deploys Docker images. Build and test steps were already ran in previous workflows
    # TODO this needs the pypi secrets
    - name: Publish Docker image for release ${{ steps.get_version.outputs.VERSION }}
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        echo '${{ secrets.DOCKER_TOKEN }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
        docker tag projectnessie/nessie:${RELEASE_VERSION} projectnessie/nessie:latest
        docker push projectnessie/nessie:${RELEASE_VERSION} && docker push projectnessie/nessie:latest

    # TODO close + deploy the OSSRH staging repo, maybe switch from maven-deploy-plugin to nexus-staging-maven-plugin to allow that?

    # Create Nessie release on GitHub
    # TODO need some templating to create a release-notes markdown with highlights, changelog and download locations.
    - name: Create Nessie release ${{ steps.get_version.outputs.VERSION }} in GitHub
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        git changelog -t ${RELEASE_VERSION} -n -x /dev/null | egrep -v '^  [*] (Bump |\[release\] ).*$' > /tmp/release-notes.txt
        gh release create ${GIT_TAG} --notes-file /tmp/release-notes.txt --title "Nessie version ${RELEASE_VERSION}"
