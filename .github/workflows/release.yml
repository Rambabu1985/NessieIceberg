# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie GitHub Release workflow

# Manually triggered workflow, takes the "release-version" and "next-version" arguments.

# Projectnessie really prefers a linear git history - aka no merges. PRs must not be merged
# while the release workflow runs. In case the git history would not be linear, this workflow will
# fail without having uploaded/pushed any release artifacts.


name: Release

on:
  # Manually triggered
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'The version to release - e.g. `0.5.0`'
        required: true
      nextVersion:
        description: 'The nest development version - e.g. `0.6.0` - without the SNAPSHOT suffix'
        required: true

jobs:
  build:
    name: Built, test, release
    runs-on: ubuntu-latest

    # Restrict "Release" to these people
    # (maybe there's a way via the GH API to _correctly_ identify whether the actor is an admin,
    # owner or moderator, but that either requires using a 3rd party action or a bunch of code.)
    if: contains('["rymurr", "laurentgo", "snazy"]', github.actor)

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Log changelog (FYI only)
    - name: Changelog for ${{ github.event.inputs.releaseVersion }}
      env:
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
      run: |
        # git changelog -t ${RELEASE_VERSION} -n -x /dev/null | egrep -v '^  [*] (Bump |\[release\] ).*$'
        git changelog -t ${RELEASE_VERSION} -n -x /dev/null

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_OSSRH_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Set up JDK 8
      uses: AdoptOpenJDK/install-jdk@v1
      with:
        version: '8'
        targets: 'JDK8_HOME'

    # Using Python 3.8
    # Might be worth to bump the version and/or make it configurable in the future
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Set up Maven toolchains.xml
      run: |
        cat << 'EOT' > ${HOME}/.m2/toolchains.xml
        <?xml version="1.0" encoding="UTF8"?>
        <toolchains>
          <toolchain>
            <type>jdk</type>
            <provides>
              <version>11</version>
              <vendor>zulu</vendor>
            </provides>
            <configuration>
              <jdkHome>${env.JAVA_HOME}</jdkHome>
            </configuration>
          </toolchain>
          <toolchain>
            <type>jdk</type>
            <provides>
              <version>1.8</version>
              <vendor>adoptopenjdk</vendor>
            </provides>
            <configuration>
              <jdkHome>${env.JDK8_HOME}</jdkHome>
            </configuration>
          </toolchain>
        </toolchains>
        EOT

    # TODO Maybe better to _not_ use cached dependencies just to be sure that everything's available at time of release --> remove this one?
    - name: Cache local pip repository
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # TODO Maybe better to _not_ use cached dependencies just to be sure that everything's available at time of release --> remove this one?
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/projectnessie
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # TODO Maybe better to _not_ use cached dependencies just to be sure that everything's available at time of release --> remove this one?
    - name: Cache local NPM repository
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # TODO Maybe better to _not_ use cached dependencies just to be sure that everything's available at time of release --> remove this one?
    - name: Cache local Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Prepare git config
      run: |
        git config --global user.email "nessie-release-workflow-noreply@projectnessie.org"
        git config --global user.name "Projectnessie Release Workflow [bot]"

        # Update the remote repo URL to include the secret so this job can push to the repo
        UPSTREAM="$(git remote)"
        REPO_OWNER="$(echo ${GITHUB_REPOSITORY} | cut -d/ -f2)"
        git remote set-url ${UPSTREAM} https://${REPO_OWNER}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements_lint.txt
        pip install tox-gh-actions bumpversion twine

    - name: Bump release version ${{ github.event.inputs.releaseVersion }}
      env:
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
        GIT_TAG: nessie-${{ github.event.inputs.releaseVersion }}
      run: |
        ./mvnw versions:set -DgenerateBackupPoms=false -DnewVersion=${RELEASE_VERSION}
        (cd python ; bumpversion --no-commit --new-version ${RELEASE_VERSION} minor)

    - name: Build via Maven and run tests
      env:
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        SPARK_LOCAL_IP: localhost
      run: |
        ./mvnw install -Pnative -Pjdk8-tests -Pcode-coverage -Prelease

    - name: Tag the Docker image
      run: |
        # We can always use projectnessie/nessie here because it's a release
        docker tag projectnessie/nessie:${RELEASE_VERSION} projectnessie/nessie:latest

    - name: Build Gradle plugin and run tests
      run: |
        (cd tools/apprunner-gradle-plugin/ ; ./gradlew build)

    - name: Build pynessie and run tests
      run: |
        cd python
        tox
        python setup.py sdist bdist_wheel

    # TODO Remove this one - b/c it's codecov?
    - uses: codecov/codecov-action@v1
      with:
        flags: java,python

    # TODO Seems we don't capture the Python test results
    # TODO Seems we don't capture the Gradle test results
    - name: Capture test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: |
          **/target/surefire-reports/*
          **/target/failsafe-reports/*

    # Record the release-version in git and add the git tag for the release.
    - name: Record ${{ github.event.inputs.releaseVersion }} release in git
      env:
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
        GIT_TAG: nessie-${{ github.event.inputs.releaseVersion }}
      run: |
        git commit -a -m "[release] release nessie-${RELEASE_VERSION}"
        git tag ${GIT_TAG}

    # Update versions to next development iteration and add a new git commit
    - name: Set next development version version ${{ github.event.inputs.nextVersion }}
      env:
        NEXT_VERSION: ${{ github.event.inputs.nextVersion }}
      run: |
        ./mvnw versions:set -DgenerateBackupPoms=false -DnewVersion=${NEXT_VERSION}-SNAPSHOT
        (cd python ; bumpversion --no-commit --new-version ${NEXT_VERSION} minor)

        git commit -a -m "[release] next development iteration ${NEXT_VERSION}-SNAPSHOT"

    # Push the 2 git commits and git tag. If this one fails, some other commit was pushed to the
    # 'main' branch and break the linear history for the Nessie git repo.
    - name: Push tag + branch
      env:
        GIT_TAG: nessie-${{ github.event.inputs.releaseVersion }}
      run: |
        UPSTREAM="$(git remote)"

        git push ${UPSTREAM}
        git push ${UPSTREAM} :refs/tags/${GIT_TAG}
        git push ${UPSTREAM} ${GIT_TAG}

    # This last step finally deploys the artifacts. All build and test steps were already ran
    # in previous steps
    # TODO close + deploy the OSSRH staging repo, maybe switch from maven-deploy-plugin to nexus-staging-maven-plugin to allow that?
    - name: Publish artifacts for release ${{ github.event.inputs.releaseVersion }}
      env:
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
        GIT_TAG: nessie-${{ github.event.inputs.releaseVersion }}
        MAVEN_USERNAME: ${{ secrets.OSSRH_ACCESS_ID }}
        MAVEN_OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        SPARK_LOCAL_IP: localhost
      run: |
        # Reset to workspace to release tag (the next version has been configured)
        git reset --hard ${GIT_TAG}

        mvn -B deploy --file pom.xml -Pnative -Prelease -DdeployAtEnd=true -DskipTests

        (cd tools/apprunner-gradle-plugin/ ; ./gradlew publishPlugins)

        (cd python ; python -m twine upload dist/*)

        echo '${{ secrets.DOCKER_TOKEN }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
        docker push projectnessie/nessie:${RELEASE_VERSION} && docker push projectnessie/nessie:latest

        git changelog -t ${RELEASE_VERSION} -n -x /dev/null | egrep -v '^  [*] (Bump |\[release\] ).*$' > /tmp/release-notes.txt
        gh release create ${GIT_TAG} --notes-file /tmp/release-notes.txt --title "Nessie version ${RELEASE_VERSION}"
