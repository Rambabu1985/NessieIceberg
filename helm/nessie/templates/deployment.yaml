apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nessie.fullname" . }}
  labels:
    {{- include "nessie.labels" . | nindent 4 }}
    {{- if .Values.podLabels }}
    {{- toYaml .Values.podLabels | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "nessie.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        projectnessie.org/config-checksum: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nessie.selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nessie.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: nessie-config
              mountPath: /deployments/config/application.properties
              subPath: application.properties
          {{- if or (eq .Values.versionStoreType "ROCKSDB") (eq .Values.versionStoreType "ROCKS") }}
            - name: rocks-storage
              mountPath: /rocks-nessie
          {{- end }}
          {{- if and (eq .Values.versionStoreType "BIGTABLE") (.Values.bigtable.secret) }}
            - name: bigtable-creds
              mountPath: /bigtable-nessie
          {{- end }}
          env:
            {{- if or (eq .Values.versionStoreType "DYNAMODB") (eq .Values.versionStoreType "DYNAMO") }}
            {{- if .Values.dynamodb.secret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dynamodb.secret.name }}
                  key: {{ .Values.dynamodb.secret.awsAccessKeyId }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dynamodb.secret.name }}
                  key: {{ .Values.dynamodb.secret.awsSecretAccessKey }}
            {{- end }}
            {{- end }}
            {{- if or (eq .Values.versionStoreType "MONGODB") (eq .Values.versionStoreType "MONGO") }}
            {{- if .Values.mongodb.secret.name }}
            - name: QUARKUS_MONGODB_CREDENTIALS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.secret.name }}
                  key: {{ .Values.mongodb.secret.username }}
            - name: QUARKUS_MONGODB_CREDENTIALS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.secret.name }}
                  key: {{ .Values.mongodb.secret.password }}
            {{- end }}
            {{- end }}
            {{- if eq .Values.versionStoreType "CASSANDRA" }}
            {{- if .Values.cassandra.secret.name }}
            - name: QUARKUS_CASSANDRA_AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cassandra.secret.name }}
                  key: {{ .Values.cassandra.secret.username }}
            - name: QUARKUS_CASSANDRA_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cassandra.secret.name }}
                  key: {{ .Values.cassandra.secret.password }}
            {{- end }}
            {{- end }}
            {{- if or (eq .Values.versionStoreType "JDBC") (eq .Values.versionStoreType "TRANSACTIONAL") }}
            {{- $oldConfig := .Values.postgres | default dict }}
            {{- $newConfig := .Values.jdbc | default dict }}
            {{- $jdbcUrl := coalesce $oldConfig.jdbcUrl $newConfig.jdbcUrl }}
            {{- $oldSecret := $oldConfig.secret | default dict }}
            {{- $newSecret := $newConfig.secret | default dict }}
            {{- $secretName := coalesce $oldSecret.name $newSecret.name }}
            {{- $secretUsername := coalesce $oldSecret.username $newSecret.username }}
            {{- $secretPassword := coalesce $oldSecret.password $newSecret.password }}
            {{- $dbKind := include "nessie.dbKind" $jdbcUrl }}
            - name: QUARKUS_DATASOURCE_{{- upper $dbKind -}}_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ $secretUsername }}
            - name: QUARKUS_DATASOURCE_{{- upper $dbKind -}}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ $secretPassword }}
            {{- end }}
            {{- if eq .Values.versionStoreType "BIGTABLE" }}
            {{- if .Values.bigtable.secret }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /bigtable-nessie/sa_credentials.json
            {{- end }}
            {{- end }}
            {{- if .Values.authentication.oidcClientSecret -}}
            - name: QUARKUS_OIDC_CREDENTIALS_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.authentication.oidcClientSecret.name }}
                  key: {{ .Values.authentication.oidcClientSecret.key }}
            {{- end -}}
            {{- if .Values.catalog.storage.s3.accessKeySecret.name }}
            - name: NESSIE_CATALOG_SERVICE_S3_ACCESS_KEY_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.s3.accessKeySecret.name }}
                  key: {{ .Values.catalog.storage.s3.accessKeySecret.awsAccessKeyId }}
            - name: NESSIE_CATALOG_SERVICE_S3_ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.s3.accessKeySecret.name }}
                  key: {{ .Values.catalog.storage.s3.accessKeySecret.awsSecretAccessKey }}
            {{- end }}
            {{- range $bucket := .Values.catalog.storage.s3.buckets -}}
            {{- if $bucket.accessKeySecret }}
            - name: NESSIE_CATALOG_SERVICE_S3_BUCKETS__{{- $bucket.name -}}__ACCESS_KEY_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.accessKeySecret.name }}
                  key: {{ $bucket.accessKeySecret.awsAccessKeyId }}
            - name: NESSIE_CATALOG_SERVICE_S3_BUCKETS__{{- $bucket.name -}}__ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.accessKeySecret.name }}
                  key: {{ $bucket.accessKeySecret.awsSecretAccessKey }}
            {{- end }}
            {{- end -}}
            {{- if .Values.catalog.storage.gcs.authCredentialsJsonSecret.name }}
            - name: NESSIE_CATALOG_SERVICE_GCS_AUTH_CREDENTIALS_JSON_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.gcs.authCredentialsJsonSecret.name }}
                  key: {{ .Values.catalog.storage.gcs.authCredentialsJsonSecret.key }}
            {{- end }}
            {{- if .Values.catalog.storage.gcs.oauth2TokenSecret.name }}
            - name: NESSIE_CATALOG_SERVICE_GCS_OAUTH2_TOKEN_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.gcs.oauth2TokenSecret.name }}
                  key: {{ .Values.catalog.storage.gcs.oauth2TokenSecret.token }}
            {{- if .Values.catalog.storage.gcs.oauth2TokenSecret.expiresAt }}
            - name: NESSIE_CATALOG_SERVICE_GCS_OAUTH2_TOKEN_SECRET_EXPIRES_AT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.gcs.oauth2TokenSecret.name }}
                  key: {{ .Values.catalog.storage.gcs.oauth2TokenSecret.expiresAt }}
            {{- end }}
            {{- end }}
            {{- range $bucket := .Values.catalog.storage.gcs.buckets -}}
            {{- if $bucket.authCredentialsJsonSecret }}
            - name: NESSIE_CATALOG_SERVICE_GCS_BUCKETS__{{- $bucket.name -}}__AUTH_CREDENTIALS_JSON_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.authCredentialsJsonSecret.name }}
                  key: {{ $bucket.authCredentialsJsonSecret.key }}
            {{- end }}
            {{- if $bucket.oauth2TokenSecret }}
            - name: NESSIE_CATALOG_SERVICE_GCS_BUCKETS__{{- $bucket.name -}}__OAUTH2_TOKEN_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.oauth2TokenSecret.name }}
                  key: {{ $bucket.oauth2TokenSecret.token }}
            {{- if $bucket.oauth2TokenSecret.expiresAt }}
            - name: NESSIE_CATALOG_SERVICE_GCS_BUCKETS__{{- $bucket.name -}}__OAUTH2_TOKEN_SECRET_EXPIRES_AT
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.oauth2TokenSecret.name }}
                  key: {{ $bucket.oauth2TokenSecret.expiresAt }}
            {{- end }}
            {{- end }}
            {{- end -}}
            {{- if .Values.catalog.storage.adls.accountSecret.name }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.adls.accountSecret.name }}
                  key: {{ .Values.catalog.storage.adls.accountSecret.accountName }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_ACCOUNT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.adls.accountSecret.name }}
                  key: {{ .Values.catalog.storage.adls.accountSecret.accountKey }}
            {{- end }}
            {{- if .Values.catalog.storage.adls.sasTokenSecret.name }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_SAS_TOKEN_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.catalog.storage.adls.sasTokenSecret.name }}
                  key: {{ .Values.catalog.storage.adls.sasTokenSecret.sasToken }}
            {{- end }}
            {{- range $filesystem := .Values.catalog.storage.adls.filesystems -}}
            {{- if $filesystem.accountSecret }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_FILE_SYSTEMS__{{- $filesystem.name -}}__ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ $filesystem.accountSecret.name }}
                  key: {{ $filesystem.accountSecret.accountName }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_FILE_SYSTEMS__{{- $filesystem.name -}}__ACCOUNT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $filesystem.accountSecret.name }}
                  key: {{ $filesystem.accountSecret.accountKey }}
            {{- end }}
            {{- if $filesystem.sasTokenSecret }}
            - name: NESSIE_CATALOG_SERVICE_ADLS_FILE_SYSTEMS__{{- $filesystem.name -}}__SAS_TOKEN_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $filesystem.sasTokenSecret.name }}
                  key: {{ $filesystem.sasTokenSecret.sasToken }}
            {{- end }}
            {{- end -}}
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          ports:
            - name: nessie-server
              containerPort: 19120
              protocol: TCP
            - name: nessie-mgmt
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 45
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: nessie-config
          configMap:
            name: {{ include "nessie.fullname" . }}
      {{- if or (eq .Values.versionStoreType "ROCKSDB") (eq .Values.versionStoreType "ROCKS") }}
        - name: rocks-storage
          persistentVolumeClaim:
            claimName: {{ include "nessie.fullname" . }}
      {{- end }}
      {{- if and (eq .Values.versionStoreType "BIGTABLE") (.Values.bigtable.secret) }}
        - name: bigtable-creds
          secret:
            secretName: {{ .Values.bigtable.secret.name }}
            items:
              - key: {{ .Values.bigtable.secret.key }}
                path: sa_credentials.json
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
