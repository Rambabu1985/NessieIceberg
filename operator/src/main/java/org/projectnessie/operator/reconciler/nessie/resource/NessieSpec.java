/*
 * Copyright (C) 2024 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.projectnessie.operator.reconciler.nessie.resource;

import static org.projectnessie.operator.events.EventReason.AutoscalingNotAllowed;
import static org.projectnessie.operator.events.EventReason.InvalidAdvancedConfig;
import static org.projectnessie.operator.events.EventReason.MultipleReplicasNotAllowed;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import io.fabric8.crd.generator.annotation.PrinterColumn;
import io.fabric8.generator.annotation.Default;
import io.fabric8.generator.annotation.Min;
import io.fabric8.kubernetes.api.model.EnvVar;
import io.sundr.builder.annotations.Buildable;
import java.util.List;
import java.util.Map;
import org.projectnessie.operator.exception.InvalidSpecException;
import org.projectnessie.operator.reconciler.nessie.resource.options.AuthenticationOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.AuthorizationOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.AutoscalingOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.GcOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.IngressOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.MonitoringOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.RemoteDebugOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.ServiceOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.TelemetryOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.VersionStoreOptions;
import org.projectnessie.operator.reconciler.nessie.resource.options.VersionStoreOptions.VersionStoreType;
import org.projectnessie.operator.reconciler.nessie.resource.options.WorkloadOptions;

@Buildable(builderPackage = "io.fabric8.kubernetes.api.builder", editableEnabled = false)
@JsonInclude(Include.NON_NULL)
public record NessieSpec(
    @JsonPropertyDescription(
            "The number of replicas to run, defaults to 1. Ignored when autoscaling is enabled.")
        @Default("1")
        @Min(0) // allow deployments to scale down to 0 (e.g. for maintenance)
        @PrinterColumn(name = "Size")
        Integer size,
    @JsonPropertyDescription("The log level to use for the Nessie server.") //
        @Default("INFO")
        LogLevel logLevel,
    @JsonPropertyDescription("Nessie version store options.") //
        @Default("{}")
        VersionStoreOptions versionStore,
    @JsonPropertyDescription("Nessie service options.") //
        @Default("{}")
        ServiceOptions service,
    @JsonPropertyDescription("Nessie ingress options.") //
        @Default("{}")
        IngressOptions ingress,
    @JsonPropertyDescription("Nessie authentication options.") //
        @Default("{}")
        AuthenticationOptions authentication,
    @JsonPropertyDescription("Nessie authorization options.") //
        @Default("{}")
        AuthorizationOptions authorization,
    @JsonPropertyDescription("Nessie telemetry options.") //
        @Default("{}")
        TelemetryOptions telemetry,
    @JsonPropertyDescription("Nessie monitoring options.") //
        @Default("{}")
        MonitoringOptions monitoring,
    @JsonPropertyDescription("Nessie autoscaling options.") //
        @Default("{}")
        AutoscalingOptions autoscaling,
    @JsonPropertyDescription("Nessie remote debugging options.") //
        @Default("{}")
        RemoteDebugOptions remoteDebug,
    @JsonPropertyDescription("Nessie GC options.") @Default("{}") GcOptions gc,
    @JsonPropertyDescription(
            """
            Extra (advanced) configuration. \
            You can pass here any valid Nessie or Quarkus configuration property. \
            Properties defined here will override any configuration property \
            generated by this operator, with the exception of environment variables \
            defined in extraEnv, which have even higher priority.
            """)
        @JsonAnySetter
        @Default("{}")
        JsonNode advancedConfig,
    @JsonPropertyDescription(
            """
            Extra JVM options to add to the Nessie server container. \
            These options will be merged together and included in the \
            JAVA_OPTS_APPEND environment variable. By default, \
            the operator sets the following JVM options: \
            -XX:InitialRAMPercentage=70.0, -XX:MaxRAMPercentage=70.0. \
            This makes the JVM use 70% of the container's memory.
            """)
        @Default(
            """
            ["-XX:InitialRAMPercentage=70.0", "-XX:MaxRAMPercentage=70.0"]""")
        List<String> jvmOptions,
    @JsonPropertyDescription(
            """
            Extra environment variables to add to the Nessie server container. \
            Any environment variable defined here will override any environment \
            variables defined elsewhere, or generated by this operator.
            """)
        @Default("[]")
        List<EnvVar> extraEnv,
    @JsonPropertyDescription(
            """
            Options for the Nessie deployment (service account, container image, \
            security context, etc.).""")
        @Default("{}")
        WorkloadOptions deployment) {

  private static final List<String> DEFAULT_JVM_OPTIONS =
      List.of("-XX:InitialRAMPercentage=70.0", "-XX:MaxRAMPercentage=70.0");

  public enum LogLevel {
    DEBUG,
    INFO,
    WARN,
    ERROR
  }

  public NessieSpec() {
    this(
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null);
  }

  /**
   * Compact constructor enforcing default values.
   *
   * @implNote most of the records in this package and child packages have a compact constructor
   *     enforcing default values. This is necessary because default values are only applied
   *     automatically server-side if a defaulting webhook is registered. This is not always the
   *     case, which is why we need to enforce them programmatically. This is also useful for unit
   *     tests.
   */
  public NessieSpec {
    size = size != null ? size : 1;
    logLevel = logLevel != null ? logLevel : LogLevel.INFO;
    versionStore = versionStore != null ? versionStore : new VersionStoreOptions();
    service = service != null ? service : new ServiceOptions();
    ingress = ingress != null ? ingress : new IngressOptions();
    authentication = authentication != null ? authentication : new AuthenticationOptions();
    authorization = authorization != null ? authorization : new AuthorizationOptions();
    telemetry = telemetry != null ? telemetry : new TelemetryOptions();
    monitoring = monitoring != null ? monitoring : new MonitoringOptions();
    autoscaling = autoscaling != null ? autoscaling : new AutoscalingOptions();
    remoteDebug = remoteDebug != null ? remoteDebug : new RemoteDebugOptions();
    gc = gc != null ? gc : new GcOptions();
    advancedConfig =
        advancedConfig != null ? advancedConfig : JsonNodeFactory.instance.objectNode();
    extraEnv = extraEnv != null ? List.copyOf(extraEnv) : List.of();
    jvmOptions = jvmOptions != null ? List.copyOf(jvmOptions) : DEFAULT_JVM_OPTIONS;
    deployment = deployment != null ? deployment : new WorkloadOptions();
  }

  public void validate() {
    versionStore.validate();
    authentication.validate();
    authorization.validate();
    ingress.validate();
    telemetry.validate();
    autoscaling.validate();
    validateReplicas();
    validateAdvancedConfig();
  }

  private void validateReplicas() {
    VersionStoreType type = versionStore().type();
    if (!type.supportsMultipleReplicas()) {
      if (size() > 1) {
        throw new InvalidSpecException(
            MultipleReplicasNotAllowed,
            type + " version store can only be used with a single replica.");
      }
      if (autoscaling().enabled()) {
        throw new InvalidSpecException(
            AutoscalingNotAllowed,
            "Autoscaling is not allowed with %s version store.".formatted(type));
      }
    }
  }

  private void validateAdvancedConfig() {
    if (!advancedConfig.isObject()) {
      throw new InvalidSpecException(
          InvalidAdvancedConfig,
          "Invalid advanced config: expected root object, got %s"
              .formatted(advancedConfig.getNodeType()));
    }
    validateAdvancedConfig(advancedConfig, "");
  }

  private static void validateAdvancedConfig(JsonNode configNode, String prefix) {
    for (Map.Entry<String, JsonNode> entry : configNode.properties()) {
      String key = prefix + entry.getKey();
      JsonNode value = entry.getValue();
      if (value.isObject()) {
        validateAdvancedConfig(value, key + ".");
      } else if (!value.isValueNode()) {
        throw new InvalidSpecException(
            InvalidAdvancedConfig,
            "Invalid advanced config at key %s: expected object or scalar, got %s"
                .formatted(key, value.getNodeType()));
      }
    }
  }
}
