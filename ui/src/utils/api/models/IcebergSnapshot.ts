/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents the state of an Iceberg table in a Nessie branch. An Iceberg table is globally identified via its fully qualified name via 'ContentsKey' plus a unique ID, the latter is represented via 'Contents.id'.
 * 
 * Note: If the Iceberg 'TableMetadata' contains no snapshot, the properties 'currentSnapshotId' and 'manifestListLocation' will be null.
 * 
 * A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations', for Iceberg consists of a 'Operation.Put' with an 'IcebergSnapshot' and an 'IcebergTable' as the expected-global-state.
 * @export
 * @interface IcebergSnapshot
 */
export interface IcebergSnapshot {
    /**
     * 
     * @type {string}
     * @memberof IcebergSnapshot
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof IcebergSnapshot
     */
    currentSnapshotId?: number;
    /**
     * 
     * @type {string}
     * @memberof IcebergSnapshot
     */
    metadataLocation: string;
}

export function IcebergSnapshotFromJSON(json: any): IcebergSnapshot {
    return IcebergSnapshotFromJSONTyped(json, false);
}

export function IcebergSnapshotFromJSONTyped(json: any, ignoreDiscriminator: boolean): IcebergSnapshot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'currentSnapshotId': !exists(json, 'currentSnapshotId') ? undefined : json['currentSnapshotId'],
        'metadataLocation': json['metadataLocation'],
    };
}

export function IcebergSnapshotToJSON(value?: IcebergSnapshot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'currentSnapshotId': value.currentSnapshotId,
        'metadataLocation': value.metadataLocation,
    };
}


