/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Contents,
    ContentsFromJSON,
    ContentsFromJSONTyped,
    ContentsToJSON,
    ContentsKey,
    ContentsKeyFromJSON,
    ContentsKeyFromJSONTyped,
    ContentsKeyToJSON,
    GlobalContents,
    GlobalContentsFromJSON,
    GlobalContentsFromJSONTyped,
    GlobalContentsToJSON,
} from './';

/**
 * Add or replace (put) a 'Contents' object for a 'ContentsKey'. Depending on the actual table type (Iceberg, Delta, Hive, SQL-View), Nessie tracks the 'global state' of individual tables. For example put-operations for Iceberg tables must include the 'expectedContents', except for the very first put-operation for a newly created table (think: CREATE TABLE).
 * @export
 * @interface Put
 */
export interface Put {
    /**
     * 
     * @type {ContentsKey}
     * @memberof Put
     */
    key: ContentsKey;
    /**
     * 
     * @type {Contents}
     * @memberof Put
     */
    contents: Contents;
    /**
     * 
     * @type {GlobalContents}
     * @memberof Put
     */
    expectedContents?: GlobalContents;
}

export function PutFromJSON(json: any): Put {
    return PutFromJSONTyped(json, false);
}

export function PutFromJSONTyped(json: any, ignoreDiscriminator: boolean): Put {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': ContentsKeyFromJSON(json['key']),
        'contents': ContentsFromJSON(json['contents']),
        'expectedContents': !exists(json, 'expectedContents') ? undefined : GlobalContentsFromJSON(json['expectedContents']),
    };
}

export function PutToJSON(value?: Put | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentsKeyToJSON(value.key),
        'contents': ContentsToJSON(value.contents),
        'expectedContents': GlobalContentsToJSON(value.expectedContents),
    };
}


